generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId   String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizPlays QuizPlay[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

model Category {
  categoryId  String  @id @default(uuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizzes Quiz[]

  @@map("categories")
}

model Quiz {
  quizId      String @id @default(uuid())
  title       String
  description String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [categoryId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions Question[]
  quizPlays QuizPlay[]

  @@map("quizzes")
}

model Question {
  questionId    String   @id @default(uuid())
  question      String
  options       String[]
  correctOption String[]

  score Int @default(10)

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [quizId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers Answer[]

  @@map("questions")
}

model QuizPlay {
  quizPlayId String @id @default(uuid())

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [quizId])

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  playedAt DateTime @default(now())

  answers Answer[]

  @@map("quiz_plays")
}

model Answer {
  answerId String @id @default(uuid())

  quizPlayId String
  quizPlay   QuizPlay @relation(fields: [quizPlayId], references: [quizPlayId])

  questionId String
  question   Question @relation(fields: [questionId], references: [questionId])

  chosenOption String[]

  isCorrect Boolean
  score     Int

  @@map("answers")
}
